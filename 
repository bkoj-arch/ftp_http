
[4mSSH-KEYGEN[24m(1)                General Commands Manual               [4mSSH-KEYGEN[24m(1)

[1mNAME[0m
       ssh-keygen ‚Äî OpenSSH authentication key utility

[1mSYNOPSIS[0m
       [1mssh-keygen  [22m[[1m-q[22m]  [[1m-a  [4m[22mrounds[24m] [[1m-b [4m[22mbits[24m] [[1m-C [4m[22mcomment[24m] [[1m-f [4m[22moutput_keyfile[24m]
                  [[1m-m    [4m[22mformat[24m]     [[1m-N     [4m[22mnew_passphrase[24m]     [[1m-O     [4m[22moption[24m]
                  [[1m-t  dsa  [22m|  [1mecdsa  [22m|  [1mecdsa-sk  [22m| [1med25519 [22m| [1med25519-sk [22m| [1mrsa[22m]
                  [[1m-w [4m[22mprovider[24m] [[1m-Z [4m[22mcipher[24m]
       [1mssh-keygen -p [22m[[1m-a [4m[22mrounds[24m] [[1m-f [4m[22mkeyfile[24m] [[1m-m  [4m[22mformat[24m]  [[1m-N  [4m[22mnew_passphrase[24m]
                  [[1m-P [4m[22mold_passphrase[24m] [[1m-Z [4m[22mcipher[24m]
       [1mssh-keygen -i [22m[[1m-f [4m[22minput_keyfile[24m] [[1m-m [4m[22mkey_format[24m]
       [1mssh-keygen -e [22m[[1m-f [4m[22minput_keyfile[24m] [[1m-m [4m[22mkey_format[24m]
       [1mssh-keygen -y [22m[[1m-f [4m[22minput_keyfile[24m]
       [1mssh-keygen -c [22m[[1m-a [4m[22mrounds[24m] [[1m-C [4m[22mcomment[24m] [[1m-f [4m[22mkeyfile[24m] [[1m-P [4m[22mpassphrase[24m]
       [1mssh-keygen -l [22m[[1m-v[22m] [[1m-E [4m[22mfingerprint_hash[24m] [[1m-f [4m[22minput_keyfile[24m]
       [1mssh-keygen -B [22m[[1m-f [4m[22minput_keyfile[24m]
       [1mssh-keygen -D [4m[22mpkcs11[0m
       [1mssh-keygen -F [4m[22mhostname[24m [[1m-lv[22m] [[1m-f [4m[22mknown_hosts_file[24m]
       [1mssh-keygen -H [22m[[1m-f [4m[22mknown_hosts_file[24m]
       [1mssh-keygen -K [22m[[1m-a [4m[22mrounds[24m] [[1m-w [4m[22mprovider[24m]
       [1mssh-keygen -R [4m[22mhostname[24m [[1m-f [4m[22mknown_hosts_file[24m]
       [1mssh-keygen -r [4m[22mhostname[24m [[1m-g[22m] [[1m-f [4m[22minput_keyfile[24m]
       [1mssh-keygen -M generate [22m[[1m-O [4m[22moption[24m] [4moutput_file[0m
       [1mssh-keygen -M screen [22m[[1m-f [4m[22minput_file[24m] [[1m-O [4m[22moption[24m] [4moutput_file[0m
       [1mssh-keygen  -I  [4m[22mcertificate_identity[24m [1m-s [4m[22mca_key[24m [[1m-hU[22m] [[1m-D [4m[22mpkcs11_provider[24m]
                  [[1m-n   [4m[22mprincipals[24m]   [[1m-O   [4m[22moption[24m]    [[1m-V    [4m[22mvalidity_interval[24m]
                  [[1m-z [4m[22mserial_number[24m] [4mfile[24m [4m...[0m
       [1mssh-keygen -L [22m[[1m-f [4m[22minput_keyfile[24m]
       [1mssh-keygen -A [22m[[1m-a [4m[22mrounds[24m] [[1m-f [4m[22mprefix_path[24m]
       [1mssh-keygen  -k  -f  [4m[22mkrl_file[24m  [[1m-u[22m]  [[1m-s  [4m[22mca_public[24m]  [[1m-z  [4m[22mversion_number[24m]
                  [4mfile[24m [4m...[0m
       [1mssh-keygen -Q [22m[[1m-l[22m] [1m-f [4m[22mkrl_file[24m [4mfile[24m [4m...[0m
       [1mssh-keygen  -Y  find-principals  [22m[[1m-O   [4m[22moption[24m]   [1m-s   [4m[22msignature_file[24m   [1m-f[0m
                  [4mallowed_signers_file[0m
       [1mssh-keygen -Y match-principals -I [4m[22msigner_identity[24m [1m-f [4m[22mallowed_signers_file[0m
       [1mssh-keygen -Y check-novalidate [22m[[1m-O [4m[22moption[24m] [1m-n [4m[22mnamespace[24m [1m-s [4m[22msignature_file[0m
       [1mssh-keygen -Y sign [22m[[1m-O [4m[22moption[24m] [1m-f [4m[22mkey_file[24m [1m-n [4m[22mnamespace[24m [4mfile[24m [4m...[0m
       [1mssh-keygen   -Y   verify   [22m[[1m-O   [4m[22moption[24m]   [1m-f   [4m[22mallowed_signers_file[24m   [1m-I[0m
                  [4msigner_identity[24m     [1m-n     [4m[22mnamespace[24m     [1m-s     [4m[22msignature_file[0m
                  [[1m-r [4m[22mrevocation_file[24m]

[1mDESCRIPTION[0m
       [1mssh-keygen  [22mgenerates,  manages  and  converts  authentication  keys  for
       [4mssh[24m(1).  [1mssh-keygen [22mcan create keys for use by SSH protocol version 2.

       The type of key to be generated is specified with the [1m-t [22moption.  If  in‚Äê
       voked without any arguments, [1mssh-keygen [22mwill generate an Ed25519 key.

       [1mssh-keygen  [22mis  also  used  to  generate groups for use in Diffie-Hellman
       group exchange (DH-GEX).  See the ‚ÄúMODULI  GENERATION‚Äù  section  for  de‚Äê
       tails.

       Finally,  [1mssh-keygen  [22mcan  be  used to generate and update Key Revocation
       Lists, and to test whether given keys have been revoked by one.  See  the
       ‚ÄúKEY REVOCATION LISTS‚Äù section for details.

       Normally each user wishing to use SSH with public key authentication runs
       this   once   to   create   the   authentication  key  in  [4m~/.ssh/id_dsa[24m,
       [4m~/.ssh/id_ecdsa[24m,          [4m~/.ssh/id_ecdsa_sk[24m,          [4m~/.ssh/id_ed25519[24m,
       [4m~/.ssh/id_ed25519_sk[24m or [4m~/.ssh/id_rsa[24m.  Additionally, the system adminis‚Äê
       trator may use this to generate host keys, as seen in [4m/etc/rc[24m.

       Normally  this  program generates the key and asks for a file in which to
       store the private key.  The public key is stored in a file with the  same
       name  but  ‚Äú.pub‚Äù appended.  The program also asks for a passphrase.  The
       passphrase may be empty to indicate no passphrase (host keys must have an
       empty passphrase), or  it  may  be  a  string  of  arbitrary  length.   A
       passphrase is similar to a password, except it can be a phrase with a se‚Äê
       ries of words, punctuation, numbers, whitespace, or any string of charac‚Äê
       ters  you want.  Good passphrases are 10-30 characters long, are not sim‚Äê
       ple sentences or otherwise easily guessable (English prose has  only  1-2
       bits  of  entropy  per character, and provides very bad passphrases), and
       contain a mix of upper and lowercase letters, numbers,  and  non-alphanu‚Äê
       meric  characters.   The  passphrase can be changed later by using the [1m-p[0m
       option.

       There is no way to recover a lost passphrase.  If the passphrase is  lost
       or  forgotten,  a  new key must be generated and the corresponding public
       key copied to other machines.

       [1mssh-keygen [22mwill by default write  keys  in  an  OpenSSH-specific  format.
       This  format is preferred as it offers better protection for keys at rest
       as well as allowing storage of key comments within the private  key  file
       itself.   The  key  comment  may be useful to help identify the key.  The
       comment is initialized to ‚Äúuser@host‚Äù when the key is created, but can be
       changed using the [1m-c [22moption.

       It is still possible for [1mssh-keygen [22mto write the previously-used PEM for‚Äê
       mat private keys using the [1m-m [22mflag.  This may be used when generating new
       keys, and existing new-format keys may be converted using this option  in
       conjunction with the [1m-p [22m(change passphrase) flag.

       After  a  key  is generated, [1mssh-keygen [22mwill ask where the keys should be
       placed to be activated.

       The options are as follows:

       [1m-A      [22mGenerate host keys of all default  key  types  (rsa,  ecdsa,  and
               ed25519)  if they do not already exist.  The host keys are gener‚Äê
               ated with the default key file path, an empty passphrase, default
               bits for the key type, and default comment.  If [1m-f [22mhas also  been
               specified,  its  argument is used as a prefix to the default path
               for the resulting host key files.  This is  used  by  [4m/etc/rc[24m  to
               generate new host keys.

       [1m-a [4m[22mrounds[0m
               When  saving  a  private key, this option specifies the number of
               KDF (key derivation function, currently  [4mbcrypt_pbkdf[24m(3))  rounds
               used.   Higher  numbers  result in slower passphrase verification
               and increased resistance to brute-force password cracking (should
               the keys be stolen).  The default is 16 rounds.

       [1m-B      [22mShow the bubblebabble digest of specified private or  public  key
               file.

       [1m-b [4m[22mbits[0m
               Specifies the number of bits in the key to create.  For RSA keys,
               the minimum size is 1024 bits and the default is 3072 bits.  Gen‚Äê
               erally, 3072 bits is considered sufficient.  DSA keys must be ex‚Äê
               actly  1024 bits as specified by FIPS 186-2.  For ECDSA keys, the
               [1m-b [22mflag determines the key length by selecting from one of  three
               elliptic  curve  sizes:  256, 384 or 521 bits.  Attempting to use
               bit lengths other than these three values  for  ECDSA  keys  will
               fail.   ECDSA-SK, Ed25519 and Ed25519-SK keys have a fixed length
               and the [1m-b [22mflag will be ignored.

       [1m-C [4m[22mcomment[0m
               Provides a new comment.

       [1m-c      [22mRequests changing the comment  in  the  private  and  public  key
               files.   The program will prompt for the file containing the pri‚Äê
               vate keys, for the passphrase if the key has one, and for the new
               comment.

       [1m-D [4m[22mpkcs11[0m
               Download the public keys provided by the PKCS#11  shared  library
               [4mpkcs11[24m.   When used in combination with [1m-s[22m, this option indicates
               that a CA key resides in a PKCS#11 token (see the  ‚ÄúCERTIFICATES‚Äù
               section for details).

       [1m-E [4m[22mfingerprint_hash[0m
               Specifies  the  hash  algorithm  used when displaying key finger‚Äê
               prints.  Valid options are: ‚Äúmd5‚Äù and ‚Äúsha256‚Äù.  The  default  is
               ‚Äúsha256‚Äù.

       [1m-e      [22mThis  option  will  read a private or public OpenSSH key file and
               print to stdout a public key in one of the formats  specified  by
               the [1m-m [22moption.  The default export format is ‚ÄúRFC4716‚Äù.  This op‚Äê
               tion allows exporting OpenSSH keys for use by other programs, in‚Äê
               cluding several commercial SSH implementations.

       [1m-F [4m[22mhostname[24m | [4m[hostname]:port[0m
               Search  for the specified [4mhostname[24m (with optional port number) in
               a [4mknown_hosts[24m file, listing any occurrences found.   This  option
               is  useful to find hashed host names or addresses and may also be
               used in conjunction with the [1m-H [22moption to print found keys  in  a
               hashed format.

       [1m-f [4m[22mfilename[0m
               Specifies the filename of the key file.

       [1m-g      [22mUse generic DNS format when printing fingerprint resource records
               using the [1m-r [22mcommand.

       [1m-H      [22mHash  a  [4mknown_hosts[24m  file.   This replaces all hostnames and ad‚Äê
               dresses with hashed representations within  the  specified  file;
               the  original  content  is  moved  to  a file with a .old suffix.
               These hashes may be used normally by [1mssh [22mand [1msshd[22m,  but  they  do
               not  reveal identifying information should the file's contents be
               disclosed.  This option will not modify existing hashed hostnames
               and is therefore safe to use on files that mix  hashed  and  non-
               hashed names.

       [1m-h      [22mWhen  signing  a key, create a host certificate instead of a user
               certificate.  See the ‚ÄúCERTIFICATES‚Äù section for details.

       [1m-I [4m[22mcertificate_identity[0m
               Specify the key identity when signing  a  public  key.   See  the
               ‚ÄúCERTIFICATES‚Äù section for details.

       [1m-i      [22mThis option will read an unencrypted private (or public) key file
               in  the  format  specified  by the [1m-m [22moption and print an OpenSSH
               compatible private (or public) key to stdout.  This option allows
               importing keys from other software, including several  commercial
               SSH implementations.  The default import format is ‚ÄúRFC4716‚Äù.

       [1m-K      [22mDownload  resident  keys  from  a FIDO authenticator.  Public and
               private key files will be written to the  current  directory  for
               each  downloaded  key.   If  multiple FIDO authenticators are at‚Äê
               tached, keys will be downloaded from the first touched  authenti‚Äê
               cator.   See  the  ‚ÄúFIDO AUTHENTICATOR‚Äù section for more informa‚Äê
               tion.

       [1m-k      [22mGenerate a KRL file.  In this mode, [1mssh-keygen  [22mwill  generate  a
               KRL  file  at the location specified via the [1m-f [22mflag that revokes
               every  key  or  certificate  presented  on  the   command   line.
               Keys/certificates  to  be  revoked may be specified by public key
               file or using the format described in the ‚ÄúKEY REVOCATION  LISTS‚Äù
               section.

       [1m-L      [22mPrints the contents of one or more certificates.

       [1m-l      [22mShow  fingerprint  of specified public key file.  For RSA and DSA
               keys [1mssh-keygen [22mtries to find the matching public  key  file  and
               prints  its fingerprint.  If combined with [1m-v[22m, a visual ASCII art
               representation of the key is supplied with the fingerprint.

       [1m-M generate[0m
               Generate candidate Diffie-Hellman Group Exchange (DH-GEX) parame‚Äê
               ters for eventual use  by  the  ‚Äòdiffie-hellman-group-exchange-*‚Äô
               key  exchange  methods.   The numbers generated by this operation
               must be further screened before use.  See the ‚ÄúMODULI GENERATION‚Äù
               section for more information.

       [1m-M screen[0m
               Screen candidate parameters for  Diffie-Hellman  Group  Exchange.
               This  will  accept a list of candidate numbers and test that they
               are safe (Sophie Germain) primes with  acceptable  group  genera‚Äê
               tors.   The  results  of  this  operation  may  be  added  to the
               [4m/etc/ssh/moduli[24m file.  See the ‚ÄúMODULI  GENERATION‚Äù  section  for
               more information.

       [1m-m [4m[22mkey_format[0m
               Specify a key format for key generation, the [1m-i [22m(import), [1m-e [22m(ex‚Äê
               port) conversion options, and the [1m-p [22mchange passphrase operation.
               The latter may be used to convert between OpenSSH private key and
               PEM   private  key  formats.   The  supported  key  formats  are:
               ‚ÄúRFC4716‚Äù (RFC 4716/SSH2 public or private key),  ‚ÄúPKCS8‚Äù  (PKCS8
               public  or  private  key)  or ‚ÄúPEM‚Äù (PEM public key).  By default
               OpenSSH will write newly-generated private keys in its  own  for‚Äê
               mat,  but when converting public keys for export the default for‚Äê
               mat is ‚ÄúRFC4716‚Äù.  Setting a format of ‚ÄúPEM‚Äù when  generating  or
               updating  a  supported  private key type will cause the key to be
               stored in the legacy PEM private key format.

       [1m-N [4m[22mnew_passphrase[0m
               Provides the new passphrase.

       [1m-n [4m[22mprincipals[0m
               Specify one or more principals (user or host  names)  to  be  in‚Äê
               cluded  in a certificate when signing a key.  Multiple principals
               may be specified, separated by commas.   See  the  ‚ÄúCERTIFICATES‚Äù
               section for details.

       [1m-O [4m[22moption[0m
               Specify  a key/value option.  These are specific to the operation
               that [1mssh-keygen [22mhas been requested to perform.

               When signing certificates, one  of  the  options  listed  in  the
               ‚ÄúCERTIFICATES‚Äù section may be specified here.

               When  performing  moduli  generation or screening, one of the op‚Äê
               tions listed in the ‚ÄúMODULI GENERATION‚Äù section may be specified.

               When  generating  FIDO  authenticator-backed  keys,  the  options
               listed in the ‚ÄúFIDO AUTHENTICATOR‚Äù section may be specified.

               When  performing signature-related options using the [1m-Y [22mflag, the
               following options are accepted:

               [1mhashalg[22m=[4malgorithm[0m
                       Selects the hash algorithm to use for hashing the message
                       to  be  signed.   Valid  algorithms  are   ‚Äúsha256‚Äù   and
                       ‚Äúsha512.‚Äù The default is ‚Äúsha512.‚Äù

               [1mprint-pubkey[0m
                       Print the full public key to standard output after signa‚Äê
                       ture verification.

               [1mverify-time[22m=[4mtimestamp[0m
                       Specifies  a  time  to use when validating signatures in‚Äê
                       stead of the current time.  The time may be specified  as
                       a  date  or  time  in  the  YYYYMMDD[Z]  or  in  YYYYMMD‚Äê
                       DHHMM[SS][Z] formats.  Dates and  times  will  be  inter‚Äê
                       preted  in  the  current system time zone unless suffixed
                       with a Z character, which causes them to  be  interpreted
                       in the UTC time zone.

               When  generating  SSHFP DNS records from public keys using the [1m-r[0m
               flag, the following options are accepted:

               [1mhashalg[22m=[4malgorithm[0m
                       Selects a hash  algorithm  to  use  when  printing  SSHFP
                       records  using  the [1m-D [22mflag.  Valid algorithms are ‚Äúsha1‚Äù
                       and ‚Äúsha256‚Äù.  The default is to print both.

               The [1m-O [22moption may be specified multiple times.

       [1m-P [4m[22mpassphrase[0m
               Provides the (old) passphrase.

       [1m-p      [22mRequests changing the passphrase of a private key file instead of
               creating a new private key.  The program will prompt for the file
               containing the private key, for the old passphrase, and twice for
               the new passphrase.

       [1m-Q      [22mTest whether keys have been revoked in a KRL.  If the  [1m-l  [22moption
               is also specified then the contents of the KRL will be printed.

       [1m-q      [22mSilence [1mssh-keygen[22m.

       [1m-R [4m[22mhostname[24m | [4m[hostname]:port[0m
               Removes  all  keys  belonging to the specified [4mhostname[24m (with op‚Äê
               tional port number) from a [4mknown_hosts[24m file.  This option is use‚Äê
               ful to delete hashed hosts (see the [1m-H [22moption above).

       [1m-r [4m[22mhostname[0m
               Print the SSHFP fingerprint resource record  named  [4mhostname[24m  for
               the specified public key file.

       [1m-s [4m[22mca_key[0m
               Certify  (sign) a public key using the specified CA key.  See the
               ‚ÄúCERTIFICATES‚Äù section for details.

               When generating a KRL, [1m-s [22mspecifies a path to  a  CA  public  key
               file  used  to  revoke  certificates directly by key ID or serial
               number.  See the ‚ÄúKEY REVOCATION LISTS‚Äù section for details.

       [1m-t dsa [22m| [1mecdsa [22m| [1mecdsa-sk [22m| [1med25519 [22m| [1med25519-sk [22m| [1mrsa[0m
               Specifies the type of key to create.   The  possible  values  are
               ‚Äúdsa‚Äù, ‚Äúecdsa‚Äù, ‚Äúecdsa-sk‚Äù, ‚Äúed25519‚Äù, ‚Äúed25519-sk‚Äù, or ‚Äúrsa‚Äù.

               This  flag may also be used to specify the desired signature type
               when signing certificates using an RSA CA key.  The available RSA
               signature variants are ‚Äússh-rsa‚Äù  (SHA1  signatures,  not  recom‚Äê
               mended), ‚Äúrsa-sha2-256‚Äù, and ‚Äúrsa-sha2-512‚Äù (the default).

       [1m-U      [22mWhen  used  in  combination with [1m-s [22mor [1m-Y sign[22m, this option indi‚Äê
               cates  that  a  CA  key  resides  in  a  [4mssh-agent[24m(1).   See  the
               ‚ÄúCERTIFICATES‚Äù section for more information.

       [1m-u      [22mUpdate  a  KRL.  When specified with [1m-k[22m, keys listed via the com‚Äê
               mand line are added to the existing KRL rather than a new KRL be‚Äê
               ing created.

       [1m-V [4m[22mvalidity_interval[0m
               Specify a validity interval when signing a certificate.  A valid‚Äê
               ity interval may consist of a single time,  indicating  that  the
               certificate  is valid beginning now and expiring at that time, or
               may consist of two times separated by a colon to indicate an  ex‚Äê
               plicit time interval.

               The start time may be specified as:
               [1m‚Ä¢   [22mThe string ‚Äúalways‚Äù to indicate the certificate has no speci‚Äê
                   fied start time.
               [1m‚Ä¢   [22mA  date or time in the system time zone formatted as YYYYMMDD
                   or YYYYMMDDHHMM[SS].
               [1m‚Ä¢   [22mA date or time in the UTC time zone as YYYYMMDDZ or  YYYYMMD‚Äê
                   DHHMM[SS]Z.
               [1m‚Ä¢   [22mA  relative time before the current system time consisting of
                   a minus sign followed by an interval in the format  described
                   in the TIME FORMATS section of [4msshd_config[24m(5).
               [1m‚Ä¢   [22mA  raw  seconds  since  epoch  (Jan 1 1970 00:00:00 UTC) as a
                   hexadecimal number beginning with ‚Äú0x‚Äù.

               The end time may be specified similarly to the start time:
               [1m‚Ä¢   [22mThe string ‚Äúforever‚Äù to indicate the certificate has no spec‚Äê
                   ified end time.
               [1m‚Ä¢   [22mA date or time in the system time zone formatted as  YYYYMMDD
                   or YYYYMMDDHHMM[SS].
               [1m‚Ä¢   [22mA  date or time in the UTC time zone as YYYYMMDDZ or YYYYMMD‚Äê
                   DHHMM[SS]Z.
               [1m‚Ä¢   [22mA relative time after the current system time consisting of a
                   plus sign followed by an interval in the format described  in
                   the TIME FORMATS section of [4msshd_config[24m(5).
               [1m‚Ä¢   [22mA  raw  seconds  since  epoch  (Jan 1 1970 00:00:00 UTC) as a
                   hexadecimal number beginning with ‚Äú0x‚Äù.

               For example:

               +52w1d  Valid from now to 52 weeks and one day from now.

               -4w:+4w
                       Valid from four weeks ago to four weeks from now.

               20100101123000:20110101123000
                       Valid from 12:30 PM, January 1st, 2010 to 12:30 PM, Janu‚Äê
                       ary 1st, 2011.

               20100101123000Z:20110101123000Z
                       Similar, but interpreted in the UTC time zone rather than
                       the system time zone.

               -1d:20110101
                       Valid from yesterday to midnight, January 1st, 2011.

               0x1:0x2000000000
                       Valid from roughly early 1970 to May 2033.

               -1m:forever
                       Valid from one minute ago and never expiring.

       [1m-v      [22mVerbose mode.  Causes  [1mssh-keygen  [22mto  print  debugging  messages
               about its progress.  This is helpful for debugging moduli genera‚Äê
               tion.   Multiple  [1m-v [22moptions increase the verbosity.  The maximum
               is 3.

       [1m-w [4m[22mprovider[0m
               Specifies a path to a library that will  be  used  when  creating
               FIDO  authenticator-hosted  keys, overriding the default of using
               the internal USB HID support.

       [1m-Y find-principals[0m
               Find the principal(s) associated with the public key of a  signa‚Äê
               ture,  provided  using  the [1m-s [22mflag in an authorized signers file
               provided using the [1m-f [22mflag.  The format of  the  allowed  signers
               file  is  documented  in the ‚ÄúALLOWED SIGNERS‚Äù section below.  If
               one or more matching principals are found, they are  returned  on
               standard output.

       [1m-Y match-principals[0m
               Find  principal matching the principal name provided using the [1m-I[0m
               flag in the authorized signers file specified using the [1m-f  [22mflag.
               If  one  or more matching principals are found, they are returned
               on standard output.

       [1m-Y check-novalidate[0m
               Checks that a signature generated using [1mssh-keygen -Y sign [22mhas  a
               valid  structure.   This  does  not validate if a signature comes
               from an authorized signer.  When testing a signature,  [1mssh-keygen[0m
               accepts a message on standard input and a signature namespace us‚Äê
               ing  [1m-n[22m.  A file containing the corresponding signature must also
               be supplied using the [1m-s [22mflag.  Successful testing of the  signa‚Äê
               ture is signalled by [1mssh-keygen [22mreturning a zero exit status.

       [1m-Y sign[0m
               Cryptographically  sign  a  file  or  some data using an SSH key.
               When signing, [1mssh-keygen [22maccepts zero or more files  to  sign  on
               the command-line - if no files are specified then [1mssh-keygen [22mwill
               sign data presented on standard input.  Signatures are written to
               the  path  of the input file with ‚Äú.sig‚Äù appended, or to standard
               output if the message to be signed was read from standard input.

               The key used for signing is specified using the [1m-f [22moption and may
               refer to either a private key, or a public key with  the  private
               half  available  via [4mssh-agent[24m(1).  An additional signature name‚Äê
               space, used to prevent signature confusion across  different  do‚Äê
               mains  of  use  (e.g. file signing vs email signing) must be pro‚Äê
               vided via the [1m-n [22mflag.  Namespaces are arbitrary strings, and may
               include: ‚Äúfile‚Äù for file signing, ‚Äúemail‚Äù for email signing.  For
               custom uses, it is recommended to use  names  following  a  NAME‚Äê
               SPACE@YOUR.DOMAIN pattern to generate unambiguous namespaces.

       [1m-Y verify[0m
               Request  to verify a signature generated using [1mssh-keygen -Y sign[0m
               as described above.  When verifying a signature,  [1mssh-keygen  [22mac‚Äê
               cepts a message on standard input and a signature namespace using
               [1m-n[22m.   A  file containing the corresponding signature must also be
               supplied using the [1m-s [22mflag, along with the identity of the signer
               using [1m-I [22mand a list of allowed signers via the [1m-f [22mflag.  The for‚Äê
               mat of the allowed signers file is  documented  in  the  ‚ÄúALLOWED
               SIGNERS‚Äù  section  below.   A file containing revoked keys can be
               passed using the [1m-r [22mflag.  The revocation file may be a KRL or  a
               one-per-line  list of public keys.  Successful verification by an
               authorized signer is signalled by  [1mssh-keygen  [22mreturning  a  zero
               exit status.

       [1m-y      [22mThis  option will read a private OpenSSH format file and print an
               OpenSSH public key to stdout.

       [1m-Z [4m[22mcipher[0m
               Specifies the cipher  to  use  for  encryption  when  writing  an
               OpenSSH-format  private  key file.  The list of available ciphers
               may  be  obtained  using  "ssh  -Q  cipher".   The   default   is
               ‚Äúaes256-ctr‚Äù.

       [1m-z [4m[22mserial_number[0m
               Specifies  a  serial  number to be embedded in the certificate to
               distinguish this certificate from others from the  same  CA.   If
               the [4mserial_number[24m is prefixed with a ‚Äò+‚Äô character, then the ser‚Äê
               ial  number  will be incremented for each certificate signed on a
               single command-line.  The default serial number is zero.

               When generating a KRL, the [1m-z [22mflag is used to specify a KRL  ver‚Äê
               sion number.

[1mMODULI GENERATION[0m
       [1mssh-keygen  [22mmay  be  used to generate groups for the Diffie-Hellman Group
       Exchange (DH-GEX)  protocol.   Generating  these  groups  is  a  two-step
       process:  first,  candidate primes are generated using a fast, but memory
       intensive process.  These candidate primes are then tested for  suitabil‚Äê
       ity (a CPU-intensive process).

       Generation  of primes is performed using the [1m-M generate [22moption.  The de‚Äê
       sired length of the primes may be specified by the [1m-O bits  [22moption.   For
       example:

             [1m# ssh-keygen -M generate -O bits=2048 moduli-2048.candidates[0m

       By default, the search for primes begins at a random point in the desired
       length  range.   This  may be overridden using the [1m-O start [22moption, which
       specifies a different start point (in hex).

       Once a set of candidates have been generated, they must be  screened  for
       suitability.   This may be performed using the [1m-M screen [22moption.  In this
       mode [1mssh-keygen [22mwill read candidates from standard input (or a file spec‚Äê
       ified using the [1m-f [22moption).  For example:

             [1m# ssh-keygen -M screen -f moduli-2048.candidates moduli-2048[0m

       By default, each candidate will be  subjected  to  100  primality  tests.
       This may be overridden using the [1m-O prime-tests [22moption.  The DH generator
       value will be chosen automatically for the prime under consideration.  If
       a  specific  generator  is  desired,  it  may  be  requested using the [1m-O[0m
       [1mgenerator [22moption.  Valid generator values are 2, 3, and 5.

       Screened DH groups may be installed in [4m/etc/ssh/moduli[24m.  It is  important
       that this file contains moduli of a range of bit lengths.

       A number of options are available for moduli generation and screening via
       the [1m-O [22mflag:

       [1mlines[22m=[4mnumber[0m
               Exit after screening the specified number of lines while perform‚Äê
               ing DH candidate screening.

       [1mstart-line[22m=[4mline-number[0m
               Start  screening at the specified line number while performing DH
               candidate screening.

       [1mcheckpoint[22m=[4mfilename[0m
               Write the last line processed to the specified  file  while  per‚Äê
               forming  DH candidate screening.  This will be used to skip lines
               in the input file that have already been processed if the job  is
               restarted.

       [1mmemory[22m=[4mmbytes[0m
               Specify  the amount of memory to use (in megabytes) when generat‚Äê
               ing candidate moduli for DH-GEX.

       [1mstart[22m=[4mhex-value[0m
               Specify start point (in hex) when generating candidate moduli for
               DH-GEX.

       [1mgenerator[22m=[4mvalue[0m
               Specify desired generator (in  decimal)  when  testing  candidate
               moduli for DH-GEX.

[1mCERTIFICATES[0m
       [1mssh-keygen  [22msupports  signing of keys to produce certificates that may be
       used for user or host authentication.  Certificates consist of  a  public
       key,  some  identity  information,  zero or more principal (user or host)
       names and a set of options that are signed by a  Certification  Authority
       (CA)  key.   Clients or servers may then trust only the CA key and verify
       its signature on a certificate rather than trusting many user/host  keys.
       Note  that OpenSSH certificates are a different, and much simpler, format
       to the X.509 certificates used in [4mssl[24m(8).

       [1mssh-keygen [22msupports two types of certificates: user and host.  User  cer‚Äê
       tificates  authenticate  users  to servers, whereas host certificates au‚Äê
       thenticate server hosts to users.  To generate a user certificate:

             [1m$ ssh-keygen -s /path/to/ca_key -I key_id /path/to/user_key.pub[0m

       The resultant certificate will be placed  in  [4m/path/to/user_key-cert.pub[24m.
       A host certificate requires the [1m-h [22moption:

             [1m$ ssh-keygen -s /path/to/ca_key -I key_id -h /path/to/host_key.pub[0m

       The host certificate will be output to [4m/path/to/host_key-cert.pub[24m.

       It  is  possible to sign using a CA key stored in a PKCS#11 token by pro‚Äê
       viding the token library using [1m-D [22mand identifying the CA key by providing
       its public half as an argument to [1m-s[22m:

             [1m$ ssh-keygen -s ca_key.pub -D libpkcs11.so -I key_id user_key.pub[0m

       Similarly, it is possible for the CA key to be hosted in a  [4mssh-agent[24m(1).
       This  is  indicated by the [1m-U [22mflag and, again, the CA key must be identi‚Äê
       fied by its public half.

             [1m$ ssh-keygen -Us ca_key.pub -I key_id user_key.pub[0m

       In all cases, [4mkey_id[24m is a "key identifier" that is logged by  the  server
       when the certificate is used for authentication.

       Certificates  may  be  limited  to  be  valid  for  a  set  of  principal
       (user/host) names.  By default, generated certificates are valid for  all
       users or hosts.  To generate a certificate for a specified set of princi‚Äê
       pals:

             [1m$ ssh-keygen -s ca_key -I key_id -n user1,user2 user_key.pub[0m
             [1m$ ssh-keygen -s ca_key -I key_id -h -n host.domain host_key.pub[0m

       Additional  limitations  on the validity and use of user certificates may
       be specified through certificate options.  A certificate option may  dis‚Äê
       able  features  of the SSH session, may be valid only when presented from
       particular source addresses or may force the use of a specific command.

       The options that are valid for user certificates are:

       [1mclear   [22mClear all enabled permissions.  This is useful for  clearing  the
               default  set of permissions so permissions may be added individu‚Äê
               ally.

       [1mcritical[22m:[4mname[24m[=[4mcontents[24m]
       [1mextension[22m:[4mname[24m[=[4mcontents[24m]
               Includes an arbitrary certificate critical option  or  extension.
               The   specified   [4mname[24m  should  include  a  domain  suffix,  e.g.
               ‚Äúname@example.com‚Äù.  If [4mcontents[24m is specified then it is included
               as the contents of the extension/option encoded as a string, oth‚Äê
               erwise the extension/option is created with no contents  (usually
               indicating  a  flag).   Extensions  may be ignored by a client or
               server that does not recognise them, whereas unknown critical op‚Äê
               tions will cause the certificate to be refused.

       [1mforce-command[22m=[4mcommand[0m
               Forces the execution of [4mcommand[24m instead of any shell  or  command
               specified  by the user when the certificate is used for authenti‚Äê
               cation.

       [1mno-agent-forwarding[0m
               Disable [4mssh-agent[24m(1) forwarding (permitted by default).

       [1mno-port-forwarding[0m
               Disable port forwarding (permitted by default).

       [1mno-pty  [22mDisable PTY allocation (permitted by default).

       [1mno-user-rc[0m
               Disable execution of [4m~/.ssh/rc[24m by [4msshd[24m(8) (permitted by default).

       [1mno-x11-forwarding[0m
               Disable X11 forwarding (permitted by default).

       [1mpermit-agent-forwarding[0m
               Allows [4mssh-agent[24m(1) forwarding.

       [1mpermit-port-forwarding[0m
               Allows port forwarding.

       [1mpermit-pty[0m
               Allows PTY allocation.

       [1mpermit-user-rc[0m
               Allows execution of [4m~/.ssh/rc[24m by [4msshd[24m(8).

       [1mpermit-X11-forwarding[0m
               Allows X11 forwarding.

       [1mno-touch-required[0m
               Do not require signatures made using this key include  demonstra‚Äê
               tion  of user presence (e.g. by having the user touch the authen‚Äê
               ticator).  This option only makes sense for the FIDO  authentica‚Äê
               tor algorithms [1mecdsa-sk [22mand [1med25519-sk[22m.

       [1msource-address[22m=[4maddress_list[0m
               Restrict  the source addresses from which the certificate is con‚Äê
               sidered valid.  The [4maddress_list[24m is a comma-separated list of one
               or more address/netmask pairs in CIDR format.

       [1mverify-required[0m
               Require signatures made using this key indicate that the user was
               first verified.  This option only makes sense for  the  FIDO  au‚Äê
               thenticator  algorithms  [1mecdsa-sk  [22mand [1med25519-sk[22m.  Currently PIN
               authentication is the only  supported  verification  method,  but
               other methods may be supported in the future.

       At present, no standard options are valid for host keys.

       Finally,  certificates  may  be defined with a validity lifetime.  The [1m-V[0m
       option allows specification of certificate start and end times.   A  cer‚Äê
       tificate  that is presented at a time outside this range will not be con‚Äê
       sidered valid.  By default, certificates are valid from the Unix Epoch to
       the distant future.

       For certificates to be used for user or host authentication, the CA  pub‚Äê
       lic  key  must  be  trusted  by [4msshd[24m(8) or [4mssh[24m(1).  Refer to those manual
       pages for details.

[1mFIDO AUTHENTICATOR[0m
       [1mssh-keygen [22mis able to  generate  FIDO  authenticator-backed  keys,  after
       which they may be used much like any other key type supported by OpenSSH,
       so long as the hardware authenticator is attached when the keys are used.
       FIDO  authenticators  generally  require the user to explicitly authorise
       operations by touching or tapping them.  FIDO keys consist of two  parts:
       a  key  handle part stored in the private key file on disk, and a per-de‚Äê
       vice private key that is unique to each FIDO authenticator and that  can‚Äê
       not  be  exported from the authenticator hardware.  These are combined by
       the hardware at authentication time to derive the real key that  is  used
       to  sign authentication challenges.  Supported key types are [1mecdsa-sk [22mand
       [1med25519-sk[22m.

       The options that are valid for FIDO keys are:

       [1mapplication[0m
               Override the default FIDO application/origin  string  of  ‚Äússh:‚Äù.
               This  may be useful when generating host or domain-specific resi‚Äê
               dent keys.  The specified  application  string  must  begin  with
               ‚Äússh:‚Äù.

       [1mchallenge[22m=[4mpath[0m
               Specifies a path to a challenge string that will be passed to the
               FIDO  authenticator  during key generation.  The challenge string
               may be used as part of an out-of-band protocol for key enrollment
               (a random challenge is used by default).

       [1mdevice  [22mExplicitly specify a [4mfido[24m(4) device to use, rather  than  letting
               the authenticator middleware select one.

       [1mno-touch-required[0m
               Indicate  that the generated private key should not require touch
               events (user presence) when making signatures.  Note that [4msshd[24m(8)
               will refuse such signatures by default, unless overridden via  an
               authorized_keys option.

       [1mresident[0m
               Indicate that the key handle should be stored on the FIDO authen‚Äê
               ticator itself.  This makes it easier to use the authenticator on
               multiple  computers.  Resident keys may be supported on FIDO2 au‚Äê
               thenticators and typically require that a PIN be set on  the  au‚Äê
               thenticator prior to generation.  Resident keys may be loaded off
               the  authenticator using [4mssh-add[24m(1).  Storing both parts of a key
               on a FIDO authenticator increases the likelihood of  an  attacker
               being able to use a stolen authenticator device.

       [1muser    [22mA  username  to be associated with a resident key, overriding the
               empty default username.  Specifying a username may be useful when
               generating multiple resident keys for the same application name.

       [1mverify-required[0m
               Indicate that this private key should require  user  verification
               for each signature.  Not all FIDO authenticators support this op‚Äê
               tion.  Currently PIN authentication is the only supported verifi‚Äê
               cation method, but other methods may be supported in the future.

       [1mwrite-attestation[22m=[4mpath[0m
               May be used at key generation time to record the attestation data
               returned  from  FIDO  authenticators during key generation.  This
               information is potentially sensitive.  By default, this  informa‚Äê
               tion is discarded.

[1mKEY REVOCATION LISTS[0m
       [1mssh-keygen  [22mis able to manage OpenSSH format Key Revocation Lists (KRLs).
       These binary files specify keys or certificates to  be  revoked  using  a
       compact  format,  taking as little as one bit per certificate if they are
       being revoked by serial number.

       KRLs may be generated using the [1m-k [22mflag.  This option reads one  or  more
       files  from  the command line and generates a new KRL.  The files may ei‚Äê
       ther contain a KRL specification (see below) or public keys,  listed  one
       per  line.   Plain  public keys are revoked by listing their hash or con‚Äê
       tents in the KRL and certificates revoked by serial number or key ID  (if
       the serial is zero or not available).

       Revoking  keys using a KRL specification offers explicit control over the
       types of record used to revoke keys and may be used  to  directly  revoke
       certificates by serial number or key ID without having the complete orig‚Äê
       inal certificate on hand.  A KRL specification consists of lines contain‚Äê
       ing  one  of the following directives followed by a colon and some direc‚Äê
       tive-specific information.

       [1mserial[22m: [4mserial_number[24m[-[4mserial_number[24m]
               Revokes a certificate with the specified serial  number.   Serial
               numbers  are  64-bit  values,  not  including zero and may be ex‚Äê
               pressed in decimal, hex or octal.   If  two  serial  numbers  are
               specified separated by a hyphen, then the range of serial numbers
               including and between each is revoked.  The CA key must have been
               specified on the [1mssh-keygen [22mcommand line using the [1m-s [22moption.

       [1mid[22m: [4mkey_id[0m
               Revokes  a  certificate with the specified key ID string.  The CA
               key must have been specified on the [1mssh-keygen [22mcommand line using
               the [1m-s [22moption.

       [1mkey[22m: [4mpublic_key[0m
               Revokes the specified key.  If a certificate is listed,  then  it
               is revoked as a plain public key.

       [1msha1[22m: [4mpublic_key[0m
               Revokes the specified key by including its SHA1 hash in the KRL.

       [1msha256[22m: [4mpublic_key[0m
               Revokes  the  specified  key  by including its SHA256 hash in the
               KRL.  KRLs that revoke keys by SHA256 hash are not  supported  by
               OpenSSH versions prior to 7.9.

       [1mhash[22m: [4mfingerprint[0m
               Revokes  a  key  using  a  fingerprint  hash,  as obtained from a
               [4msshd[24m(8) authentication log message or  the  [1mssh-keygen  -l  [22mflag.
               Only  SHA256  fingerprints  are supported here and resultant KRLs
               are not supported by OpenSSH versions prior to 7.9.

       KRLs may be updated using the [1m-u [22mflag in addition to [1m-k[22m.  When  this  op‚Äê
       tion  is  specified, keys listed via the command line are merged into the
       KRL, adding to those already there.

       It is also possible, given a KRL, to test whether it revokes a particular
       key (or keys).  The [1m-Q [22mflag will query an existing KRL, testing each  key
       specified on the command line.  If any key listed on the command line has
       been  revoked  (or an error encountered) then [1mssh-keygen [22mwill exit with a
       non-zero exit status.  A zero exit status will only be returned if no key
       was revoked.

[1mALLOWED SIGNERS[0m
       When verifying signatures, [1mssh-keygen [22muses a simple  list  of  identities
       and  keys  to  determine  whether  a  signature  comes from an authorized
       source.  This "allowed signers" file uses a format  patterned  after  the
       AUTHORIZED_KEYS  FILE FORMAT described in [4msshd[24m(8).  Each line of the file
       contains the following space-separated fields: principals, options,  key‚Äê
       type,  base64-encoded key.  Empty lines and lines starting with a ‚Äò#‚Äô are
       ignored as comments.

       The principals field is a pattern-list (see  PATTERNS  in  [4mssh_config[24m(5))
       consisting  of  one or more comma-separated USER@DOMAIN identity patterns
       that are accepted for signing.  When verifying,  the  identity  presented
       via the [1m-I [22moption must match a principals pattern in order for the corre‚Äê
       sponding key to be considered acceptable for verification.

       The  options  (if  present)  consist of comma-separated option specifica‚Äê
       tions.  No spaces are permitted, except within double quotes.   The  fol‚Äê
       lowing option specifications are supported (note that option keywords are
       case-insensitive):

       [1mcert-authority[0m
               Indicates  that  this  key is accepted as a certificate authority
               (CA) and that certificates signed by this CA may be accepted  for
               verification.

       [1mnamespaces[22m=namespace-list
               Specifies a pattern-list of namespaces that are accepted for this
               key.  If this option is present, the signature namespace embedded
               in  the  signature  object and presented on the verification com‚Äê
               mand-line must match the specified list before the  key  will  be
               considered acceptable.

       [1mvalid-after[22m=timestamp
               Indicates that the key is valid for use at or after the specified
               timestamp,  which  may  be  a  date or time in the YYYYMMDD[Z] or
               YYYYMMDDHHMM[SS][Z] formats.  Dates and times will be interpreted
               in the current system time zone unless suffixed with a Z  charac‚Äê
               ter, which causes them to be interpreted in the UTC time zone.

       [1mvalid-before[22m=timestamp
               Indicates  that  the key is valid for use at or before the speci‚Äê
               fied timestamp.

       When verifying signatures made by certificates,  the  expected  principal
       name  must  match both the principals pattern in the allowed signers file
       and the principals embedded in the certificate itself.

       An example allowed signers file:

          # Comments allowed at start of line
          user1@example.com,user2@example.com ssh-rsa AAAAX1...
          # A certificate authority, trusted for all principals in a domain.
          *@example.com cert-authority ssh-ed25519 AAAB4...
          # A key that is accepted only for file signing.
          user2@example.com namespaces="file" ssh-ed25519 AAA41...

[1mENVIRONMENT[0m
       SSH_SK_PROVIDER
               Specifies a path to a library that will be used when loading  any
               FIDO  authenticator-hosted  keys, overriding the default of using
               the built-in USB HID support.

[1mFILES[0m
       [4m~/.ssh/id_dsa[0m
       [4m~/.ssh/id_ecdsa[0m
       [4m~/.ssh/id_ecdsa_sk[0m
       [4m~/.ssh/id_ed25519[0m
       [4m~/.ssh/id_ed25519_sk[0m
       [4m~/.ssh/id_rsa[0m
               Contains the DSA, ECDSA, authenticator-hosted ECDSA, Ed25519, au‚Äê
               thenticator-hosted Ed25519 or RSA authentication identity of  the
               user.   This  file should not be readable by anyone but the user.
               It is possible to specify a passphrase when generating  the  key;
               that  passphrase will be used to encrypt the private part of this
               file using 128-bit AES.  This file is not automatically  accessed
               by  [1mssh-keygen [22mbut it is offered as the default file for the pri‚Äê
               vate key.  [4mssh[24m(1) will read this file when  a  login  attempt  is
               made.

       [4m~/.ssh/id_dsa.pub[0m
       [4m~/.ssh/id_ecdsa.pub[0m
       [4m~/.ssh/id_ecdsa_sk.pub[0m
       [4m~/.ssh/id_ed25519.pub[0m
       [4m~/.ssh/id_ed25519_sk.pub[0m
       [4m~/.ssh/id_rsa.pub[0m
               Contains the DSA, ECDSA, authenticator-hosted ECDSA, Ed25519, au‚Äê
               thenticator-hosted  Ed25519 or RSA public key for authentication.
               The   contents   of   this    file    should    be    added    to
               [4m~/.ssh/authorized_keys[24m  on  all machines where the user wishes to
               log in using public key authentication.  There is no need to keep
               the contents of this file secret.

       [4m/etc/ssh/moduli[0m
               Contains Diffie-Hellman groups used for DH-GEX.  The file  format
               is described in [4mmoduli[24m(5).

[1mSEE ALSO[0m
       [4mssh[24m(1), [4mssh-add[24m(1), [4mssh-agent[24m(1), [4mmoduli[24m(5), [4msshd[24m(8)

       [4mThe[24m [4mSecure[24m [4mShell[24m [4m(SSH)[24m [4mPublic[24m [4mKey[24m [4mFile[24m [4mFormat[24m, RFC 4716, 2006.

[1mAUTHORS[0m
       OpenSSH  is  a  derivative of the original and free ssh 1.2.12 release by
       Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
       de Raadt and Dug Song removed many bugs, re-added newer features and cre‚Äê
       ated OpenSSH.  Markus Friedl contributed the  support  for  SSH  protocol
       versions 1.5 and 2.0.

GNU                             September 4, 2023                  [4mSSH-KEYGEN[24m(1)
